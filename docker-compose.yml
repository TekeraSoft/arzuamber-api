services:
  # PostgreSQL Database
  arzuamber-db:
    image: postgres:latest
    container_name: arzuamber-db
    ports:
      - "5435:5432"  # Host portu ile container portunu eşliyoruz
    environment:
      - POSTGRES_USER=arzuamber_user
      - POSTGRES_PASSWORD=arzuamber_pass
      - POSTGRES_DB=arzuamber-db
    networks:
      - my-network
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Veritabanı verilerini hostta sakla
    restart: unless-stopped  # Sistem yeniden başlarsa veri kaybolmaz

  # MinIO (Blob Storage)
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: arzuamber_user
      MINIO_ROOT_PASSWORD: arzuamber_pass
    volumes:
      - minio_data:/data
    command: server --console-address ":9001" /data
    #    command: server --console-address ":9001" http://minio{1...4}/data
    networks:
      - my-network

  mc-once:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      sh -c "
          echo '🕒 MinIO hazır mı kontrol ediliyor...' &&
          until mc alias set myminio http://minio:9000 arzuamber_user arzuamber_pass; do
            echo '⏳ Bekleniyor...'; sleep 2;
          done &&
          echo '✅ mc alias tamam.' &&

          mc mb myminio/arzuamber-bucket || true &&
          mc anonymous set download myminio/arzuamber-bucket &&
          echo '✅ Bucket public yapıldı.'
        "
    networks:
      - my-network
    restart: "no"

  arzuamber-api:
    build:
      context: .
    container_name: arzuamber-api
    depends_on:
      - arzuamber-db
      - minio
    ports:
      - "9090:8080"
    networks:
      - my-network
    restart: unless-stopped

volumes:
  postgres_data:  # PostgreSQL için volume tanımı
  minio_data:     # MinIO için volume tanımı

networks:
  my-network:
    driver: bridge  # Aynı ağda çalışan servisler birbirine erişebilsin